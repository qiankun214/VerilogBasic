from autoeda_basefuc import autoeda_file_handle, autoeda_base_analysis


class autoeda_sdc_template_generator(autoeda_file_handle, autoeda_base_analysis):
    """docstring for autoeda_sdc_template_generator"""

    def __init__(self):
        super(autoeda_sdc_template_generator, self).__init__()
        self.sdc_step = [
            {"mode": "max", "sdc_type": "input"},
            {"mode": "min", "sdc_type": "input"},
            {"mode": "max", "sdc_type": "output"},
            {"mode": "min", "sdc_type": "output"}]

    def __call__(self, top_path, clk_config=None, sdc_path="./top.func.sdc"):
        self.__init__()
        self.bfuc_read_file(top_path)
        self.bfuc_get_ports()
        self.bfuc_write_file(sdc_path, self.sdc_content_gen(clk_config))

    def sdc_content_gen(self, clk_config=None):
        if clk_config is None:
            clk_config = self._defualt_config_gen()
        content = ["# generated by autoeda"]
        content.append(self._clock_set(clk_config))
        content.append(self._clock_define(clk_config))
        content.append(self._port_sdc_(clk_config))
        return "\n".join(content)

    def _defualt_config_gen(self):
        return {
            "main": {
                "port": [x["name"] for x in self.port_list
                         if x["name"] != "clk"],
                "period": 10,
                "clock": "clk"
            }
        }

    def _clock_set(self, clk_config):
        content = ["# set clock period"]
        for key in clk_config:
            content.append("set clk_%s_period %s" %
                           (key, clk_config[key]["period"]))
        return "\n".join(content)

    def _clock_define(self, clk_config):
        content = ["# clk define"]
        for key in clk_config:
            content.append(
                "create_clock -period $clk_%s_period -name \"%s_clk\" [get_ports {clk}]" % (key, key))
            content.append(
                "set_clock_uncertainty -setup 1 [get_clocks %s_clk]" % key)
            content.append(
                "set_clock_uncertainty -hold  1 [get_clocks %s_clk]\n" % key)
        return "\n".join(content)

    def _port_sdc_(self, clk_config):
        content = ["# add port"]
        for key in clk_config:
            input_ports = self._flat_port(
                clk_config[key]["port"], key_word="in")
            output_ports = self._flat_port(
                clk_config[key]["port"], key_word="out")
            flat_ports = {"input": input_ports, "output": output_ports}
            delay_content = ["set_input_delay ", "-max"]
            delay_content.append("[expr ($clk_%s_period*0.4)]" % key)
            exp_len = len(delay_content[-1])
            delay_content.append("-clock %s_clk [get_ports {" % key)
            for step in self.sdc_step:
                content.append(self._gen_port_sdc(
                    tuple(delay_content), flat_ports[step["sdc_type"]],
                    min_len=exp_len, **step))
            content.append("\n")
        return "\n".join(content)

    def _flat_port(self, port_list, key_word):
        content = []
        looktable = self._lookup_table_gen()
        for port_name in port_list:
            # print(looktable)
            if key_word in looktable[port_name]["type"]:
                if looktable[port_name]["width"] == 1:
                    content.append(port_name)
                else:
                    for i in range(looktable[port_name]["width"]):
                        content.append("%s[%s]" % (port_name, i))
        return " ".join(content)

    def _lookup_table_gen(self):
        lut = dict()
        for x in self.port_list:
            lut[x["name"]] = x
        return lut

    def _gen_port_sdc(self, sdc_list, port_str, min_len=0,
                      sdc_type="input", mode="max"):
        input_max = list(sdc_list)
        # print(sdc_list)
        if sdc_type == "output":
            input_max[0] = "set_output_delay"
        if mode == "min":
            input_max[1] = "-min"
            input_max[2] = "0".ljust(min_len)
        input_max.append(port_str)
        input_max.append("}]")
        # print(input_max)
        return " ".join(input_max)

if __name__ == '__main__':
    test = autoeda_sdc_template_generator()
    test("./test/spi_config.v", sdc_path="./test/test.sdc")
