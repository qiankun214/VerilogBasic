//generated by autoeda

module tb_fifo_top();

parameter DEPTH_LOG = 4;
parameter WIDTH = 8;

logic clk;
logic rst_n;
logic fifo_write_req;
logic [WIDTH - 1:0]fifo_write_data;
logic fifo_full;
logic fifo_read_req;
logic fifo_empty;
logic [WIDTH - 1:0]ram_read_data;

fifo_top #(
	.DEPTH_LOG(DEPTH_LOG),
	.WIDTH    (WIDTH)
) dut (
	.clk            (clk),
	.rst_n          (rst_n),
	.fifo_write_req (fifo_write_req),
	.fifo_write_data(fifo_write_data),
	.fifo_full      (fifo_full),
	.fifo_read_req  (fifo_read_req),
	.fifo_empty     (fifo_empty),
	.ram_read_data  (ram_read_data)
);

initial begin
	clk = 0;
	forever begin
		 #50 clk = ~clk;
	end
end

initial begin
	rst_n = 1'b1;
	#5 rst_n = 1'b0;
	#10 rst_n = 1'b1;
end

initial begin
	fifo_write_req = 'b0;
	fifo_write_data = 'b0;
	fifo_read_req = 'b0;
end

initial begin
	forever begin
		for (int i = 0; i < 2 ** DEPTH_LOG + 4; i++) begin
			fifo_write_req = 1'b1;
			fifo_write_data = (WIDTH)'($urandom_range(0,2 ** WIDTH));
			if(i > 4) begin
				fifo_read_req = 1'b0;
			end
			@(negedge clk);
		end
		for (int i = 0; i < 2 ** DEPTH_LOG + 8; i++) begin
			fifo_read_req = 1'b1;
			if(i > 4) begin
				fifo_write_req = 1'b0;
			end else begin
				fifo_write_data = (WIDTH)'($urandom_range(0,2 ** WIDTH));
			end
			@(negedge clk);
		end
	end
end

endmodule