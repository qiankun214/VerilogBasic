import os
import re
from autoeda_basefuc import autoeda_file_handle, autoeda_base_analysis


class autoeda_module_analysis(autoeda_file_handle, autoeda_base_analysis):
    """docstring for autoeda_basefuc"""

    def __init__(self):
        super(autoeda_module_analysis, self).__init__()

    def gen_doc(self):
        doc_list = [self._gen_doc_headcomment()]
        doc_list.append(self._gen_doc_headline(
            "report of %s" % self.module_name, 1))
        doc_list.append(self._gen_doc_headline("Abstract", 2))
        doc_list.append("- module name:%s" % self.module_name)
        doc_list.append(self._gen_doc_headline("Ports", 2))
        doc_list.append(self._gen_doc_porttable())
        doc_list.append(self._gen_doc_headline("Parameters", 2))
        doc_list.append(self._gen_doc_paramstable())
        # print(doc_list)
        print("generate the report of %s" % self.module_name)
        return "\n".join(doc_list)

    def _gen_doc_headcomment(self):
        return "---\nreport generated by autoeda_basefuc\n---"

    def _gen_doc_headline(self, content, h_step):
        headline = ["#" for _ in range(h_step)]
        headline.append(" %s" % content)
        return "".join(headline)

    def _gen_doc_paramstable(self):
        param_doc = ["| name | default data | description |",
                     "| ---- | ------------ | ----------- |"]
        for keys in self.params_dict:
            param_doc.append("| %s | %s |   |" %
                             (keys, self.params_dict[keys]))
        return "\n".join(param_doc)

    def _gen_doc_porttable(self):
        port_table = [
            "| name | type | default width | width expression | description |",
            "| ---- | ---- | --------- | ----------- | ------- |"]
        for port_info in self.port_list:
            port_table.append("| %s | %s | %s |  %s  |   |" % (
                port_info["name"],
                self._port_type_handle(port_info["type"]),
                port_info["width"],
                self._gen_doc_width_source(port_info["width_source"])))
        return "\n".join(port_table)

    def _gen_doc_width_source(self, x):
        if len(x) == 0:
            return "constant 1"
        x = x[1:-1].split(":")
        if x[-1].strip() == "0":
            if re.search(r"\s*\-\s*1\s*", x[0]) is not None:
                # print(x)
                return re.sub(r"\s*\-\s*1\s*", "", x[0])
            else:
                return "".join([x[0], " + 1"])
        else:
            return " ".join([x[0], "-", x[1], "+ 1"])

    def _port_type_handle(self, x):
        if "reg" in x:
            return "output"
        else:
            return x

    def __call__(self, file_path, doc_path="."):
        self.__init__()
        self.bfuc_read_file(file_path)
        self.bfuc_get_ports()
        self.bfuc_get_module_name()
        self.bfuc_write_file(os.path.join(
            doc_path, "report_%s.md" % self.module_name), self.gen_doc())

if __name__ == '__main__':
    test = autoeda_module_analysis()
    # test.bfuc_read_file("./spi_config.v")
    # test.bfuc_get_ports()
    # for x in test.port_list:
    #     print(x)
    # print(test.params_dict)
    # print("".join(test.file_content))
    # print(test.bfuc_get_module_name())
    test("./test/spi_config.v")
