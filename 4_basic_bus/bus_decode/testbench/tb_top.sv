//generated by autoeda
`include "../src/defines.v"
module tb_bus_decode();

parameter LOW_DATA_WIDTH = 8;
parameter BRUST_SIZE_LOG = 2;
parameter ADDR_WIDTH = 16;

logic clk;
logic rst_n;
logic [LOW_DATA_WIDTH - 1:0]low_read_data;
logic low_read_valid;
logic low_write_valid;
logic [LOW_DATA_WIDTH - 1:0]low_write_data;
logic low_write_finish;
logic [LOW_DATA_WIDTH * (2 ** BRUST_SIZE_LOG) - 1:0]high_read_data;
logic high_read_finish;
logic high_read_valid;
logic [LOW_DATA_WIDTH * (2 ** BRUST_SIZE_LOG) - 1:0]high_write_data;
logic [ADDR_WIDTH - 1:0]high_write_addr;
logic high_write_valid;

bus_decode #(
	.LOW_DATA_WIDTH(LOW_DATA_WIDTH),
	.BRUST_SIZE_LOG(BRUST_SIZE_LOG),
	.ADDR_WIDTH    (ADDR_WIDTH)
) dut (
	.clk             (clk),
	.rst_n           (rst_n),
	.low_read_data   (low_read_data),
	.low_read_valid  (low_read_valid),
	.low_write_valid (low_write_valid),
	.low_write_data  (low_write_data),
	.low_write_finish(low_write_finish),
	.high_read_data  (high_read_data),
	.high_read_finish(high_read_finish),
	.high_read_valid (high_read_valid),
	.high_write_data (high_write_data),
	.high_write_addr (high_write_addr),
	.high_write_valid(high_write_valid)
);

initial begin
	clk = 0;
	forever begin
		 #50  clk = ~clk;
	end
end

initial begin
	rst_n = 1'b1;
	#5 rst_n = 1'b0;
	#10 rst_n = 1'b1;
end

task automatic low_bus_write(int data);
	@(negedge clk);
	low_read_data = data;
	low_read_valid = 1;
	@(negedge clk);
	low_read_valid = 0;
endtask //automatic

task test_uart_rebuild(
	input integer num,
	input integer start,
	input integer data[255:0]
);
	low_bus_write(`DATA_TRAN);
	low_bus_write(8'(start % 256));
	low_bus_write(8'(start / 256));
	low_bus_write(8'((num) / 4));
	for (int i = 0; i < num; i++) begin
		$display("sending %d",data[i]);
		// $display("%d",dut.u_uart_interface_0.u_uart_input_0.tran_counter[BRUST_SIZE_LOG - 1:0]);
		low_bus_write(8'(data[i]));
	end
endtask : test_uart_rebuild

task automatic high_bus_write(integer data);
	@(negedge clk);
	high_read_data = data;
	high_read_valid = 1;
	@(negedge clk);
	high_read_valid = 0;
endtask //automatic

integer data[255:0];
initial begin
	low_read_data = 'b0;
	low_read_valid = 'b0;
	low_write_finish = 'b1;
	high_read_data = 'b0;
	high_read_valid = 'b0;
	forever begin
		@(negedge clk);
		for (int i = 0; i < 16; i++) begin
			data[i] = i;
		end
		test_uart_rebuild(8,0,data);
		high_bus_write(1023);
	end
end

endmodule